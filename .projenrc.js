const { awscdk, SourceCode } = require('projen');
const project = new awscdk.AwsCdkTypeScriptApp({
  cdkVersion: '2.1.0',
  defaultReleaseBranch: 'main',
  name: 'projen-cdk-tutorial-part-2',
  description: 'This package is for Projen Demo',

  deps: [
    'ecs-package',
  ],

  // Add License
  licensed: true,
  license: 'Apache-2.0',

  // Add gitpod.yml
  gitpod: true,

});

project.gitpod.addDockerImage({
  image: 'jsii/superchain:1-buster-slim-node14'
});

project.gitpod.addCustomTask({
  name: 'ConfigAlias',
  command: 'echo \'alias pj="npx projen"\' >> ~/.bashrc && echo \'alias cdk="npx cdk"\' >> ~/.bashrc',
});

project.gitpod.addCustomTask({
  name: 'PersistEnv',
  command: 'eval $(gp env -e)',
});

project.gitpod.addCustomTask({
  name: 'ConfigAws',
  command: 'mkdir ~/.aws',
});

project.gitpod.addCustomTask({
  name: 'ConfigAwsConfig',
  command: 'echo "[default]" >> ~/.aws/config && echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config && echo "cli_auto_prompt = on-partial" >> ~/.aws/config',
});

project.gitpod.addCustomTask({
  name: 'ConfigAwsCredentials',
  command: 'echo "[default]" >> ~/.aws/credentials && echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials && echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials',
});

project.gitpod.addCustomTask({
  name: 'CdkBootstrap',
  command: 'if [[ "$ENABLE_CDK_BOOTSTRAP" == TRUE ]]; then cdk bootstrap aws://$AWS_ACCOUNT_NUMBER/$AWS_DEFAULT_REGION; fi',
});

project.gitpod.addVscodeExtensions(
  'dbaeumer.vscode-eslint',
  'ms-azuretools.vscode-docker',
  'AmazonWebServices.aws-toolkit-vscode',
);

function ts(path) {
  const src = new SourceCode(project, path);
  src.line('// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".');
  return src;
}

function docker(path) {
  const src = new SourceCode(project, path);
  src.line('# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".');
  return src;
}

// Ecs App
const EcsApp = ts('src/main.ts');
EcsApp.line('import { App } from \'aws-cdk-lib\';');
EcsApp.line('import { EcsStack } from \'./ecs_stack\';');
EcsApp.line('const app = new App();');
EcsApp.line('new EcsStack(app, \'MyEcsStack\');');
EcsApp.line('app.synth();');

// Ecs Stack
const EcsStack = ts('src/ecs_stack.ts');
EcsStack.line('import { Stack, StackProps } from \'aws-cdk-lib\';');
EcsStack.line('import { Construct } from \'constructs\';');
EcsStack.line('import { MyEcsConstruct } from \'ecs-package\'');

EcsStack.open('export class EcsStack extends Stack {');
EcsStack.open('constructor(scope: Construct, id: string, props: StackProps = {}) {');
EcsStack.line('super(scope, id, props);');
EcsStack.open('new MyEcsConstruct(this, \'MyCluster\', {');
EcsStack.line('desiredCount: 3,');
EcsStack.line('maxAzs: 3,');
EcsStack.line('cpu: 512,');
EcsStack.line('memoryLimitMiB: 1024,');
EcsStack.line('dockerDirAsset: \'./dockerfiles\'');
EcsStack.line('dockerFileAsset: \'MyImage.Dockerfile\'');
EcsStack.close('});');
EcsStack.close('}');
EcsStack.close('}');

// Dockerfile Asset
const DockerAsset = docker('src/dockerfiles/MyImage.Dockerfile');
DockerAsset.line('FROM nginx:latest');

// Dummy Test
const DummyTest = 'DummyTest';
const Test = ts('test/hello.test.ts');

Test.open(`test('${ DummyTest }', () => {`);
Test.line('expect(true).toBe(true);');
Test.close('});');

project.synth();
